{"version":3,"sources":["dict/timerTypes.js","helper/convertSecondsToMinutes.js","components/ProgressCircle/ProgressCircle.js","Assets/sounds/alert.mp3","components/Sound/Sound.js","components/BtnController/BtnController.js","components/Timer/Timer.js","components/Dots/Dots.js","App.js","reportWebVitals.js","index.js"],"names":["timerTypes","sessionTime","shortBreak","longBreak","convertSecondsToMinutes","sec","minutes","Math","floor","seconds","trunc","ProgressCircle","time","isPaused","currentMode","remainingPercentofTime","strokeDashoffsetCalc","circleCircumference","PI","circleEle","useRef","useEffect","current","style","strokeDashoffset","stroke","className","id","width","height","version","xmlns","r","cx","cy","fill","strokeDasharray","strokeLinecap","transform","ref","Sound","audio","Audio","soundfile","play","src","type","BtnController","pausePlayClick","skipForwardClick","skipBackwardClick","aria-label","onClick","Timer","setCurrentMode","checkmarkCount","setCheckmarkCount","useState","setTime","setisPaused","intervalRef","timerWrapperEle","decreaseNum","prev","setInterval","clearInterval","classList","add","setTimeout","remove","window","location","reload","Dots","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAMeA,G,MANI,CACjBC,YAAa,cACbC,WAAY,aACZC,UAAW,cCWEC,MAdf,SAAiCC,GAC/B,IAAIC,EAAUC,KAAKC,MAAMH,EAAM,IAC3BI,EAAUJ,EAAgB,GAAVC,EASpB,OANIA,EAAU,KACZA,EAAU,IAAMA,IAHlBG,EAAUF,KAAKG,MAAMD,IAKP,KACZA,EAAU,IAAMA,GAEXH,EAAU,IAAMG,G,qBCsEVE,MA7Ef,YAOI,IANFC,EAMC,EANDA,KACAC,EAKC,EALDA,SACAC,EAIC,EAJDA,YACAb,EAGC,EAHDA,YACAC,EAEC,EAFDA,WACAC,EACC,EADDA,UAEIY,EAAyB,EACzBC,EAAuB,EAErBC,EAAsB,IAAAV,KAAKW,GAE3BC,EAAYC,iBAAO,MA4BzB,OA1BAC,qBAAU,WACJN,EAAyB,IAAMF,IAC7BC,IAAgBd,EAAWC,aAAeW,GAAQ,IAEpDI,GACG,GAFHD,EAAyBH,EAAOX,IAECgB,EACjCE,EAAUG,QAAQC,MAAMC,iBAAmBR,EAC3CG,EAAUG,QAAQC,MAAME,OAAS,WAE/BX,IAAgBd,EAAWE,YAAcU,GAAQ,IAEnDI,GACG,GAFHD,EAAyBH,EAAOV,IAECe,EACjCE,EAAUG,QAAQC,MAAMC,iBAAmBR,EAC3CG,EAAUG,QAAQC,MAAME,OAAS,WAE/BX,IAAgBd,EAAWG,WAAaS,GAAQ,IAElDI,GACG,GAFHD,EAAyBH,EAAOT,IAECc,EACjCE,EAAUG,QAAQC,MAAMC,iBAAmBR,EAC3CG,EAAUG,QAAQC,MAAME,OAAS,cAGpC,CAACb,EAAME,IAGR,qBAAKY,UAAU,0BAAf,SACE,sBACEC,GAAG,MACHC,MAAM,MACNC,OAAO,MACPC,QAAQ,MACRC,MAAM,6BALR,UAOE,wBACEJ,GAAG,WACHK,EAAE,MACFC,GAAG,MACHC,GAAG,MACHC,KAAK,cACLC,gBAAgB,SAChBZ,iBAAiB,MAGnB,wBACEG,GAAG,gBACHK,EAAE,MACFC,GAAG,MACHC,GAAG,MACHC,KAAK,cACLC,gBAAgB,SAChBZ,iBAAiB,KACjBa,cAAc,QACdC,UAAU,sBACVC,IAAKpB,UC1EA,MAA0B,kCCmB1BqB,MAhBf,WACE,IAAMC,EAAQ,IAAIC,MAAMC,GAMxB,OAJAtB,qBAAU,WACRoB,EAAMG,SACL,CAACH,IAGF,qBAAKf,UAAU,iBAAf,SACE,gCACE,wBAAQmB,IAAKF,EAAWG,KAAK,oB,MC6BtBC,MAvCf,YAKI,IAJFlC,EAIC,EAJDA,SACAmC,EAGC,EAHDA,eACAC,EAEC,EAFDA,iBACAC,EACC,EADDA,kBAEA,OACE,sBAAKxB,UAAU,yBAAf,UACE,wBACEyB,aAAW,WACXzB,UAAU,sBACV0B,QAASF,EAHX,SAKE,mBAAGxB,UAAU,2BAGf,wBACEyB,aAAYtC,EAAW,OAAS,QAChCa,UAAU,uBACV0B,QAASJ,EAHX,SAKGnC,EACC,mBAAGa,UAAU,uBAEb,mBAAGA,UAAU,0BAIjB,wBACEyB,aAAW,UACXzB,UAAU,qBACV0B,QAASH,EAHX,SAKE,mBAAGvB,UAAU,8BC2IN2B,MAvKf,YAKI,IAJFvC,EAIC,EAJDA,YACAwC,EAGC,EAHDA,eACAC,EAEC,EAFDA,eACAC,EACC,EADDA,kBAQMvD,EAAc,KAPnB,EAWqBwD,mBAASxD,GAX9B,mBAWIW,EAXJ,KAWU8C,EAXV,OAY+BD,oBAAS,GAZxC,mBAYM5C,EAZN,KAYgB8C,EAZhB,KAaGC,EAAcxC,mBACZyC,EAAkBzC,mBAElB0C,EAAc,kBAAMJ,GAAQ,SAACK,GAAD,OAAUA,EAAO,OAE7Cf,EAAiB,WAChBnC,EAGH+C,EAAYtC,QAAU0C,YAAYF,EAAa,KAF/CG,cAAcL,EAAYtC,SAI5BqC,GAAY,SAACI,GAAD,OAAWA,MA8DzB,OApBA1C,qBAAU,WACJT,EAAO,GAAKE,IAAgBd,EAAWC,cACzCqD,EAAetD,EAAWE,YAC1BwD,EA7De,KA8DfF,EAAkBD,EAAiB,GAEZ,IAAnBA,IACFD,EAAetD,EAAWG,WAC1BuD,EAjEY,OAoEZ9C,EAAO,GAAKE,IAAgBd,EAAWE,aACzCoD,EAAetD,EAAWC,aAC1ByD,EAAQzD,IAENW,GAAQ,GAAKE,IAAgBd,EAAWG,WAC1C6C,MAED,CAACpC,EAAME,EAAawC,EAAgBC,EAAgBC,IAGrD,qCACE,sBAAK9B,UAAU,QAAQa,IAAKsB,EAAiBT,QAlChC,WACfJ,IACAa,EAAgBvC,QAAQ4C,UAAUC,IAAI,OACtCC,YAAW,WACTP,EAAgBvC,QAAQ4C,UAAUG,OAAO,SACxC,MA6BD,UACE,cAAC,EAAD,CACEzD,KAAMA,EACNC,SAAUA,EACVC,YAAaA,EACbb,YAAaA,EACbC,WAtFW,IAuFXC,UAtFU,MAyFZ,sBAAKuB,UAAU,iBAAf,UACE,mBACEA,UAAS,mCAEPZ,IAAgBd,EAAWC,YACvB,UACAa,IAAgBd,EAAWE,WAC3B,aACAY,IAAgBd,EAAWG,UAC3B,YACA,WATR,SAYGC,EAAwBQ,KAG3B,mBACEc,UAAS,uCAELZ,IAAgBd,EAAWC,YACvB,UACAa,IAAgBd,EAAWE,WAC3B,aACAY,IAAgBd,EAAWG,UAC3B,YACA,WATV,SAYGW,IAAgBd,EAAWC,YACxB,OACAa,IAAgBd,EAAWE,WAC3B,cACAY,IAAgBd,EAAWG,UAC3B,aACA,eAKTS,GAAQ,GAAKE,IAAgBd,EAAWG,UACvC,mCACE,sBAAKuB,UAAU,UAAf,UACE,0CACA,wBAAQ0B,QA/EE,WAClBkB,OAAOC,SAASC,UA8ER,SACE,mBAAG9C,UAAU,uBAKnB,6BAGF,cAAC,EAAD,CACEb,SAAUA,EACVmC,eAAgBA,EAChBC,iBA9HmB,WACvBS,EAAQ,IA8HJR,kBA3HoB,WACpBpC,IAAgBd,EAAWC,cACN,IAAnBsD,GACFG,EAAQzD,GACRqD,EAAetD,EAAWC,aAC1BuD,EAAkB,KAElBE,EA9Ba,KA+BbJ,EAAetD,EAAWE,cAG1BY,IAAgBd,EAAWE,YAAcqD,GAAkB,IAC7DG,EAAQzD,GACRqD,EAAetD,EAAWC,aAC1BuD,EAAkBD,EAAiB,IAEjCzC,IAAgBd,EAAWG,YAC7BuD,EAAQzD,GACRqD,EAAetD,EAAWC,aAC1BuD,EAAkBD,EAAiB,OA2GlC3C,EAAO,EAAI,cAAC,EAAD,IAAkB,iC,MCpJrB6D,MAnBf,YAAmC,IAAnBlB,EAAkB,EAAlBA,eACd,OACE,sBAAK7B,UAAU,eAAf,UACE,sBACEA,UAAS,oBAAe6B,GAAkB,EAAI,YAAc,aAE9D,sBACE7B,UAAS,oBAAe6B,GAAkB,EAAI,YAAc,aAE9D,sBACE7B,UAAS,oBAAe6B,GAAkB,EAAI,YAAc,aAE9D,sBACE7B,UAAS,oBAAe6B,GAAkB,EAAI,YAAc,iBCWrDmB,MApBf,WAAgB,IAAD,EACyBjB,mBAASzD,EAAWC,aAD7C,mBACNa,EADM,KACOwC,EADP,OAE+BG,mBAAS,GAFxC,mBAENF,EAFM,KAEUC,EAFV,KAIb,OACE,sBAAK9B,UAAU,MAAf,UACE,wBAAQA,UAAU,eAElB,cAAC,EAAD,CACEZ,YAAaA,EACbwC,eAAgBA,EAChBC,eAAgBA,EAChBC,kBAAmBA,IAGrB,cAAC,EAAD,CAAMD,eAAgBA,QCVboB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b1e25a7c.chunk.js","sourcesContent":["const timerTypes = {\r\n  sessionTime: \"sessionTime\",\r\n  shortBreak: \"shortBreak\",\r\n  longBreak: \"longBreak\",\r\n};\r\n\r\nexport default timerTypes;\r\n","function convertSecondsToMinutes(sec) {\r\n  let minutes = Math.floor(sec / 60);\r\n  let seconds = sec - minutes * 60;\r\n  seconds = Math.trunc(seconds);\r\n\r\n  if (minutes < 10) {\r\n    minutes = \"0\" + minutes;\r\n  }\r\n  if (seconds < 10) {\r\n    seconds = \"0\" + seconds;\r\n  }\r\n  return minutes + \":\" + seconds;\r\n}\r\n\r\nexport default convertSecondsToMinutes;\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport \"./ProgressCircle.scss\";\r\nimport timerTypes from \"../../dict/timerTypes\";\r\n\r\nfunction ProgressCircle({\r\n  time,\r\n  isPaused,\r\n  currentMode,\r\n  sessionTime,\r\n  shortBreak,\r\n  longBreak,\r\n}) {\r\n  let remainingPercentofTime = 0;\r\n  let strokeDashoffsetCalc = 0;\r\n  const circleRadius = 150;\r\n  const circleCircumference = Math.PI * (circleRadius * 2);\r\n\r\n  const circleEle = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (remainingPercentofTime < 1 && !isPaused) {\r\n      if (currentMode === timerTypes.sessionTime && time >= 0) {\r\n        remainingPercentofTime = time / sessionTime;\r\n        strokeDashoffsetCalc =\r\n          (1 - remainingPercentofTime) * circleCircumference;\r\n        circleEle.current.style.strokeDashoffset = strokeDashoffsetCalc;\r\n        circleEle.current.style.stroke = \"#FA504F\";\r\n      }\r\n      if (currentMode === timerTypes.shortBreak && time >= 0) {\r\n        remainingPercentofTime = time / shortBreak;\r\n        strokeDashoffsetCalc =\r\n          (1 - remainingPercentofTime) * circleCircumference;\r\n        circleEle.current.style.strokeDashoffset = strokeDashoffsetCalc;\r\n        circleEle.current.style.stroke = \"#09E689\";\r\n      }\r\n      if (currentMode === timerTypes.longBreak && time >= 0) {\r\n        remainingPercentofTime = time / longBreak;\r\n        strokeDashoffsetCalc =\r\n          (1 - remainingPercentofTime) * circleCircumference;\r\n        circleEle.current.style.strokeDashoffset = strokeDashoffsetCalc;\r\n        circleEle.current.style.stroke = \"#73B9CE\";\r\n      }\r\n    }\r\n  }, [time, currentMode]);\r\n\r\n  return (\r\n    <div className=\"ProgressCircle__wrapper\">\r\n      <svg\r\n        id=\"svg\"\r\n        width=\"350\"\r\n        height=\"350\"\r\n        version=\"1.1\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <circle\r\n          id=\"skeleton\"\r\n          r=\"150\"\r\n          cx=\"50%\"\r\n          cy=\"50%\"\r\n          fill=\"transparent\"\r\n          strokeDasharray=\"942.47\"\r\n          strokeDashoffset=\"0\"\r\n        ></circle>\r\n\r\n        <circle\r\n          id=\"colored-meter\"\r\n          r=\"150\"\r\n          cx=\"50%\"\r\n          cy=\"50%\"\r\n          fill=\"transparent\"\r\n          strokeDasharray=\"942.47\"\r\n          strokeDashoffset=\"10\"\r\n          strokeLinecap=\"round\"\r\n          transform=\"rotate(-90 175 175)\"\r\n          ref={circleEle}\r\n        ></circle>\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProgressCircle;\r\n","export default __webpack_public_path__ + \"static/media/alert.46a4f34e.mp3\";","import React, { useEffect } from \"react\";\r\nimport soundfile from \"../../Assets/sounds/alert.mp3\";\r\n\r\nfunction Sound() {\r\n  const audio = new Audio(soundfile);\r\n\r\n  useEffect(() => {\r\n    audio.play();\r\n  }, [audio]);\r\n\r\n  return (\r\n    <div className=\"sound__wrapper\">\r\n      <audio>\r\n        <source src={soundfile} type=\"audio/mpeg\" />\r\n      </audio>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sound;\r\n","import React from \"react\";\r\nimport \"./BtnController.scss\";\r\n\r\nfunction BtnController({\r\n  isPaused,\r\n  pausePlayClick,\r\n  skipForwardClick,\r\n  skipBackwardClick,\r\n}) {\r\n  return (\r\n    <div className=\"BtnController__wrapper\">\r\n      <button\r\n        aria-label=\"Backward\"\r\n        className=\"Timer__btn backward\"\r\n        onClick={skipBackwardClick}\r\n      >\r\n        <i className=\"fas fa-step-backward\"></i>\r\n      </button>\r\n\r\n      <button\r\n        aria-label={isPaused ? \"Play\" : \"Pause\"}\r\n        className=\"Timer__btn playPause\"\r\n        onClick={pausePlayClick}\r\n      >\r\n        {isPaused ? (\r\n          <i className=\"far fa-play-circle\"></i>\r\n        ) : (\r\n          <i className=\"far fa-pause-circle\"></i>\r\n        )}\r\n      </button>\r\n\r\n      <button\r\n        aria-label=\"Forward\"\r\n        className=\"Timer__btn forward\"\r\n        onClick={skipForwardClick}\r\n      >\r\n        <i className=\"fas fa-step-forward\"></i>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BtnController;\r\n","import React, { useRef, useEffect, useState } from \"react\";\r\nimport convertSecondsToMinutes from \"../../helper/convertSecondsToMinutes\";\r\nimport timerTypes from \"../../dict/timerTypes\";\r\nimport \"./Timer.scss\";\r\nimport ProgressCircle from \"../ProgressCircle/ProgressCircle\";\r\nimport Sound from \"../Sound/Sound\";\r\nimport BtnController from \"../BtnController/BtnController\";\r\n\r\nfunction Timer({\r\n  currentMode,\r\n  setCurrentMode,\r\n  checkmarkCount,\r\n  setCheckmarkCount,\r\n}) {\r\n  // Variables below control the time. The time value is in seconds\r\n  // 30 minutes = 1800 seconds\r\n  // 25 minutes = 1500 seconds\r\n  // 15 minutes = 900 seconds\r\n  // 5 minutes = 300 seconds\r\n  // 3 minutes = 180 seconds\r\n  const sessionTime = 1500;\r\n  const shortBreak = 300;\r\n  const longBreak = 900;\r\n\r\n  let [time, setTime] = useState(sessionTime);\r\n  const [isPaused, setisPaused] = useState(true);\r\n  let intervalRef = useRef();\r\n  const timerWrapperEle = useRef();\r\n\r\n  const decreaseNum = () => setTime((prev) => prev - 0.5);\r\n\r\n  const pausePlayClick = () => {\r\n    if (!isPaused) {\r\n      clearInterval(intervalRef.current);\r\n    } else {\r\n      intervalRef.current = setInterval(decreaseNum, 500);\r\n    }\r\n    setisPaused((prev) => !prev);\r\n  };\r\n\r\n  const skipForwardClick = () => {\r\n    setTime(0);\r\n  };\r\n\r\n  const skipBackwardClick = () => {\r\n    if (currentMode === timerTypes.sessionTime) {\r\n      if (checkmarkCount === 0) {\r\n        setTime(sessionTime);\r\n        setCurrentMode(timerTypes.sessionTime);\r\n        setCheckmarkCount(0);\r\n      } else {\r\n        setTime(shortBreak);\r\n        setCurrentMode(timerTypes.shortBreak);\r\n      }\r\n    }\r\n    if (currentMode === timerTypes.shortBreak && checkmarkCount >= 1) {\r\n      setTime(sessionTime);\r\n      setCurrentMode(timerTypes.sessionTime);\r\n      setCheckmarkCount(checkmarkCount - 1);\r\n    }\r\n    if (currentMode === timerTypes.longBreak) {\r\n      setTime(sessionTime);\r\n      setCurrentMode(timerTypes.sessionTime);\r\n      setCheckmarkCount(checkmarkCount - 1);\r\n    }\r\n  };\r\n\r\n  const timerTap = () => {\r\n    pausePlayClick();\r\n    timerWrapperEle.current.classList.add(\"tap\");\r\n    setTimeout(() => {\r\n      timerWrapperEle.current.classList.remove(\"tap\");\r\n    }, 110);\r\n  };\r\n\r\n  const refreshPage = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (time < 0 && currentMode === timerTypes.sessionTime) {\r\n      setCurrentMode(timerTypes.shortBreak);\r\n      setTime(shortBreak);\r\n      setCheckmarkCount(checkmarkCount + 1);\r\n\r\n      if (checkmarkCount === 4) {\r\n        setCurrentMode(timerTypes.longBreak);\r\n        setTime(longBreak);\r\n      }\r\n    }\r\n    if (time < 0 && currentMode === timerTypes.shortBreak) {\r\n      setCurrentMode(timerTypes.sessionTime);\r\n      setTime(sessionTime);\r\n    }\r\n    if (time <= 0 && currentMode === timerTypes.longBreak) {\r\n      pausePlayClick();\r\n    }\r\n  }, [time, currentMode, setCurrentMode, checkmarkCount, setCheckmarkCount]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"Timer\" ref={timerWrapperEle} onClick={timerTap}>\r\n        <ProgressCircle\r\n          time={time}\r\n          isPaused={isPaused}\r\n          currentMode={currentMode}\r\n          sessionTime={sessionTime}\r\n          shortBreak={shortBreak}\r\n          longBreak={longBreak}\r\n        ></ProgressCircle>\r\n\r\n        <div className=\"Timer__wrapper\">\r\n          <p\r\n            className={`Timer__time\r\n            ${\r\n              currentMode === timerTypes.sessionTime\r\n                ? \"session\"\r\n                : currentMode === timerTypes.shortBreak\r\n                ? \"shortBreak\"\r\n                : currentMode === timerTypes.longBreak\r\n                ? \"longBreak\"\r\n                : \"default\"\r\n            }`}\r\n          >\r\n            {convertSecondsToMinutes(time)}\r\n          </p>\r\n\r\n          <p\r\n            className={` Timer__mode \r\n              ${\r\n                currentMode === timerTypes.sessionTime\r\n                  ? \"session\"\r\n                  : currentMode === timerTypes.shortBreak\r\n                  ? \"shortBreak\"\r\n                  : currentMode === timerTypes.longBreak\r\n                  ? \"longBreak\"\r\n                  : \"default\"\r\n              }`}\r\n          >\r\n            {currentMode === timerTypes.sessionTime\r\n              ? \"WORK\"\r\n              : currentMode === timerTypes.shortBreak\r\n              ? \"SHORT BREAK\"\r\n              : currentMode === timerTypes.longBreak\r\n              ? \"LONG BREAK\"\r\n              : \"DONE\"}\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      {time <= 0 && currentMode === timerTypes.longBreak ? (\r\n        <>\r\n          <div className=\"overlay\">\r\n            <h2>VICTORY!</h2>\r\n            <button onClick={refreshPage}>\r\n              <i className=\"fas fa-redo\"></i>\r\n            </button>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      <BtnController\r\n        isPaused={isPaused}\r\n        pausePlayClick={pausePlayClick}\r\n        skipForwardClick={skipForwardClick}\r\n        skipBackwardClick={skipBackwardClick}\r\n      ></BtnController>\r\n\r\n      {time < 0 ? <Sound></Sound> : <></>}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n","import React from \"react\";\r\nimport \"./Dots.scss\";\r\n\r\nfunction Dots({ checkmarkCount }) {\r\n  return (\r\n    <div className=\"dot__wrapper\">\r\n      <span\r\n        className={`dot__item ${checkmarkCount >= 1 ? \"completed\" : \"default\"}`}\r\n      ></span>\r\n      <span\r\n        className={`dot__item ${checkmarkCount >= 2 ? \"completed\" : \"default\"}`}\r\n      ></span>\r\n      <span\r\n        className={`dot__item ${checkmarkCount >= 3 ? \"completed\" : \"default\"}`}\r\n      ></span>\r\n      <span\r\n        className={`dot__item ${checkmarkCount >= 4 ? \"completed\" : \"default\"}`}\r\n      ></span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dots;\r\n","import \"./App.scss\";\n\nimport React, { useState } from \"react\";\nimport timerTypes from \"../src/dict/timerTypes\";\nimport Timer from \"../src/components/Timer/Timer\";\nimport Dots from \"./components/Dots/Dots\";\n\nfunction App() {\n  const [currentMode, setCurrentMode] = useState(timerTypes.sessionTime);\n  const [checkmarkCount, setCheckmarkCount] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\"></header>\n\n      <Timer\n        currentMode={currentMode}\n        setCurrentMode={setCurrentMode}\n        checkmarkCount={checkmarkCount}\n        setCheckmarkCount={setCheckmarkCount}\n      ></Timer>\n\n      <Dots checkmarkCount={checkmarkCount}></Dots>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}